<div class="nav-link-category">
    <MudTooltip Delay="500" Placement="Placement.Bottom">
        <TooltipContent>
            @this.RenderTooltipContents()
        </TooltipContent>
        <ChildContent>
            <div class="header @this.HeaderClass" @onclick="this.OnClickAsync">
                @if (this.IsOpen)
                {
                    <div class="oi oi-chevron-bottom arrow"></div>
                }
                else
                {
                    <div class="oi oi-chevron-right arrow"></div>
                }
                
                @if (!string.IsNullOrWhiteSpace(this.ImageURL))
                {
                    <img class="image" src="@this.ImageURL" />
                }
                
                <div class="text">@this.Text</div>
            </div>
        </ChildContent>
    </MudTooltip>
    <MudCollapse Expanded="@this.IsOpen">
        <div class="children">
            @this.ChildContent
        </div>
    </MudCollapse>
</div>

@code {
    [Parameter]
    public ulong Identifier { get; set; }
    [Parameter, EditorRequired]
    public string Text { get; set; }
    [Parameter]
    public string ImageURL { get; set; }
    [Parameter]
    public bool IsOpen { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback<NavLinkCategory> OnClick { get; set; }
    [Parameter]
    public RenderFragment Tooltip { get; set; }

    private string HeaderClass => this.IsOpen ? "expanded" : null;

    private Task OnClickAsync()
        => this.OnClick.InvokeAsync(this);

    private RenderFragment RenderTooltipContents()
    {
        if (this.Tooltip != null)
            return this.Tooltip;
        return 
    @<text>@this.Text</text>;
    }
}
