@if (this._filteredGuilds?.Any() != true)
{
    return;
}

<MenuExpanderBar Expanded="@this.Expanded" ExpandedChanged="this.ExpandedChanged" Light="true" CssClass="my-3" />
<MudCollapse Expanded="@this.Expanded">
    @foreach (OAuthGuildInfoResponse guild in this._filteredGuilds)
    {
        <NavLinkCategory Identifier="guild.ID" Text="@guild.Name" ImageURL="@guild.GetIconURL(this.IconSize)" 
            OnClick=@this.CategoryClicked IsOpen=@(this.CurrentCategoryIdentifier == guild.ID)>
            <div class="nav-item">
                <NavLink class="nav-link" href="@($"/guild/{guild.ID}/message-triggers")" Match="NavLinkMatch.Prefix">
                    <span class="oi oi-bolt" aria-hidden="true"></span>
                    <span class="text">Message Triggers</span>
                </NavLink>
            </div>
        </NavLinkCategory>
    }
</MudCollapse>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<OAuthGuildInfoResponse> Guilds { get; set; }
    [Parameter]
    public Func<OAuthGuildInfoResponse, bool> Filter { get; set; } = _ => true;
    [Parameter]
    public ushort IconSize { get; set; } = 32;

    [Parameter]
    public bool Expanded { get; set; }
    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }

    [Parameter]
    public ulong? CurrentCategoryIdentifier { get; set; }
    [Parameter]
    public EventCallback<NavLinkCategory> CategoryClicked { get; set; }

    private IEnumerable<OAuthGuildInfoResponse> _filteredGuilds;

    private IEnumerable<OAuthGuildInfoResponse> _allGuilds;
    private Func<OAuthGuildInfoResponse, bool> _filter;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // check if params changed to prevent re-filtering when not necessary
        if (this.Guilds == this._allGuilds && this.Filter == this._filter)
            return;

        this._allGuilds = this.Guilds;
        this._filter = this.Filter;
        this._filteredGuilds = this._allGuilds.Where(this._filter).OrderBy(g => g.Name);
    }
}
