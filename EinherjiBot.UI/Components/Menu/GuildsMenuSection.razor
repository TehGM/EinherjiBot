@using TehGM.EinherjiBot.Security
@using TehGM.EinherjiBot.UI.Security

@if (this.Guilds?.Any() != true && !this._isAdmin)
{
    return;
}

<MenuExpanderBar Expanded="@this.Expanded" ExpandedChanged="this.ExpandedChanged" Light="true" CssClass="my-3" />
<MudCollapse Expanded="@this.Expanded">
    <div class="menu-guild-filters">
        <div class="d-flex flex-row justify-center cursor-pointer mr-3 no-select" @onclick="_ => this._filtersOpen = !this._filtersOpen">
            <MudText Color="@(this._filtersOpen ? Color.Tertiary : Color.Default)" Typo="Typo.body2">Guilds</MudText>
            <MudIcon Size="Size.Small" Icon="@(this._filtersOpen ? Icons.Filled.FilterAlt : Icons.TwoTone.FilterAlt)" Color="@(this._filtersOpen ? Color.Secondary : Color.Default)" />
        </div>
        <MudCollapse Class="mx-3" Expanded="this._filtersOpen">
            <MudCheckBox T="bool" Checked="this._showAll" Dense="true" Class="no-select" CheckedChanged="this.OnShowAllFilterChanged"
                UnCheckedColor="Color.Default" Color="Color.Tertiary">
                    @($"Guilds without {EinherjiInfo.Name}")
            </MudCheckBox>
            @if (this._isAdmin)
            {
                <MudCheckBox T="bool" Checked="this._adminView" Dense="true" Class="no-select" CheckedChanged="this.OnAdminViewFilterChanged"
                    UnCheckedColor="Color.Default" Color="Color.Tertiary">
                    Admin View
                </MudCheckBox>
            }
            <MudTextField T="string" Value="this._nameFilter" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Search" Class="mx-2" ValueChanged="this.OnNameFilterChanged"
                Clearable="true" DebounceInterval="200" MaxLength="128" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.Search" />
            <MudDivider Class="mt-2 mb-1" DividerType="DividerType.Middle" />
        </MudCollapse>
    </div>


    @if (this._filteredGuilds?.Any() == true)
    {
        @foreach (IDiscordGuildInfo guild in this._filteredGuilds)
        {
            <NavLinkCategory Identifier="guild.ID" Text="@guild.Name" ImageURL="@guild.GetIconURL(this.IconSize)" 
            OnClick=@this.CategoryClicked IsOpen=@(this.CurrentCategoryIdentifier == guild.ID)>
                <div class="nav-item">
                    <NavLink class="nav-link" href="@($"/guild/{guild.ID}/message-triggers")" Match="NavLinkMatch.Prefix">
                        <span class="oi oi-bolt" aria-hidden="true"></span>
                        <span class="text">Message Triggers</span>
                    </NavLink>
                </div>
            </NavLinkCategory>
        }
    }
    else
    {
        <NothingFoundMessage />
    }
</MudCollapse>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<OAuthGuildInfoResponse> Guilds { get; set; }
    [Parameter]
    public ushort IconSize { get; set; } = 32;

    [Parameter]
    public bool Expanded { get; set; }
    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }

    [Parameter]
    public ulong? CurrentCategoryIdentifier { get; set; }
    [Parameter]
    public EventCallback<NavLinkCategory> CategoryClicked { get; set; }

    private IEnumerable<IDiscordGuildInfo> _filteredGuilds;
    private bool _showAll = false;
    private bool _adminView = true;
    private bool _isAdmin = false;
    private bool _filtersOpen = false;
    private string _nameFilter = null;

    private IEnumerable<OAuthGuildInfoResponse> _processedGuilds;
    private bool AdminViewActive => this._isAdmin && this._adminView;

    protected override async Task OnParametersSetAsync()
    {
        if (this.RenderLocation.IsServer)
            return;

        if (this._processedGuilds == this.Guilds)
            return;

        this._processedGuilds = this.Guilds;
        await this.ApplyFiltersAsync();
        await base.OnParametersSetAsync();
    }

    private async Task ApplyFiltersAsync()
    {
        IAuthContext user = (this.AuthProvider as IWebAuthProvider)?.User;
        this._isAdmin = user.IsAdmin();
        if (!user.IsLoggedIn())
        {
            this._filteredGuilds = null;
            return;
        }

        this._filteredGuilds = this.Guilds;
        IEnumerable<ulong> botGuildIDs = user.RecognizedDiscordGuildIDs;
        if (this.AdminViewActive)
        {
            IEnumerable<IDiscordGuildInfo> botGuilds = await this.EntityInfoProvider.GetGuildInfosAsync();
            this._filteredGuilds = this._filteredGuilds.UnionBy(botGuilds, g => g.ID);
            botGuildIDs = botGuilds.Select(g => g.ID);
        }

        // one
        if (!this._showAll)
            this._filteredGuilds = this._filteredGuilds.Where(g => botGuildIDs.Contains(g.ID));
        if (!this.AdminViewActive)
            this._filteredGuilds = this._filteredGuilds.Where(g => (g as OAuthGuildInfoResponse)?.CanManage == true);
        if (!string.IsNullOrEmpty(this._nameFilter))
            this._filteredGuilds = this._filteredGuilds.Where(g => g.Name.Contains(this._nameFilter, StringComparison.OrdinalIgnoreCase));
        this._filteredGuilds = this._filteredGuilds.OrderBy(g => g.Name);
    }

    private Task OnShowAllFilterChanged(bool value)
    {
        this._showAll = value;
        return this.ApplyFiltersAsync();
    }

    private Task OnAdminViewFilterChanged(bool value)
    {
        this._adminView = value;
        return this.ApplyFiltersAsync();
    }

    private Task OnNameFilterChanged(string value)
    {
        this._nameFilter = value;
        return this.ApplyFiltersAsync();
    }
}
