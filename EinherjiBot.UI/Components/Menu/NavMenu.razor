@using System.Text.RegularExpressions
@using TehGM.EinherjiBot.UI.Security
@using TehGM.EinherjiBot.API
@inherits PrerenderingComponent
@implements IDisposable
@inject IDiscordLoginRedirect LoginRedirect
@inject NavigationManager Navigation
@inject ILogger<NavMenu> Log

<div class="sidebar">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>
    
    <div class="nav-menu-items @NavMenuCssClass">
        <nav class="flex-column">
            
            <NavLinkCategory Identifier="0" Text="Einherji" ImageURL="@this._botAvatarUrl" 
                OnClick=@this.OnCategoryClick IsOpen="@(this._currentCategoryIdentifier == 0)">
                <div class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span>
                        <span class="text">Home</span>
                    </NavLink>
                </div>
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/intel" Match="NavLinkMatch.Prefix">
                                <span class="bi bi-eye" aria-hidden="true"></span>
                                <span class="text">Intel</span>
                            </NavLink>
                        </div>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/shared-accounts" Match="NavLinkMatch.Prefix">
                                <span class="bi bi-people" aria-hidden="true"></span>
                                <span class="text">Shared Accounts</span>
                            </NavLink>
                        </div>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/game-servers" Match="NavLinkMatch.Prefix">
                                <span class="bi bi-controller" aria-hidden="true"></span>
                                <span class="text">Game Servers</span>
                            </NavLink>
                        </div>

                        <PolicyAuthorizeView PolicyType="typeof(AuthorizeAdmin)">
                            <Authorized Context="AuthorizeAdmin">
                                <div class="nav-item">
                                    <NavLink class="nav-link" href="/bot/status" Match="NavLinkMatch.Prefix">
                                        <span class="bi bi-chat-right-heart-fill" aria-hidden="true"></span>
                                        <span class="text">Bot Status</span>
                                    </NavLink>
                                </div>
                                <div class="nav-item">
                                    <NavLink class="nav-link" href="/bot/audit" Match="NavLinkMatch.Prefix">
                                        <span class="oi oi-excerpt" aria-hidden="true"></span>
                                        <span class="text">Audits</span>
                                    </NavLink>
                                </div>
                            </Authorized>
                        </PolicyAuthorizeView>
                    </Authorized>
                </AuthorizeView>
            </NavLinkCategory>
            
            <AuthorizeView>
                <Authorized>
                    <NavLinkCategory Identifier="this.AuthProvider.User.ID" Text="@this.AuthProvider.User.GetUsernameWithDiscriminator()" ImageURL="@this.AuthProvider.User?.GetAvatarURL(_avatarSize)" 
                        OnClick=@this.OnCategoryClick IsOpen="@(this._currentCategoryIdentifier == this.AuthProvider.User.ID)">
                        <div class="nav-item">
                            <NavLink class="nav-link" @onclick=this.LogoutAsync>
                                <span class="oi oi-account-logout" aria-hidden="true"></span>
                                <span class="text">Logout</span>
                            </NavLink>
                        </div>
                    </NavLinkCategory>

                    @{
                        IEnumerable<UserGuildInfoResponse> validGuilds = (this.AuthProvider as IWebAuthProvider)?.Guilds?
                            .Where(g => g.CanManage)
                            .OrderBy(g => g.Name);
                        if (validGuilds?.Any() == true)
                        {
                            <hr/>
                        }
                    }
                    @foreach (UserGuildInfoResponse guild in validGuilds)
                    {
                        <NavLinkCategory Identifier="guild.ID" Text="@guild.Name" ImageURL="@guild.GetIconURL(_avatarSize)" 
                            OnClick=@this.OnCategoryClick IsOpen=@(this._currentCategoryIdentifier == guild.ID)>
                            <div class="nav-item">
                                <NavLink class="nav-link" href="@($"/guild/{guild.ID}/message-triggers")" Match="NavLinkMatch.Prefix">
                                    <span class="oi oi-bolt" aria-hidden="true"></span>
                                    <span class="text">Message Triggers</span>
                                </NavLink>
                            </div>
                        </NavLinkCategory>
                    }
                    
                    @*for administration purposes, admin can view all guilds*@
                    @*TODO: even more valuably, should see bot's guilds*@
                    <PolicyAuthorizeView PolicyType="typeof(AuthorizeAdmin)">
                        <Authorized Context="AuthorizeAdmin">
                        @{
                        IEnumerable<UserGuildInfoResponse> additionalGuilds = (this.AuthProvider as IWebAuthProvider)?.Guilds?
                            .Where(g => !g.CanManage)
                            .OrderBy(g => g.Name);
                        }
                        @if (additionalGuilds?.Any() == true)
                        {
                            <hr/>
                        }
                        @foreach (UserGuildInfoResponse guild in additionalGuilds)
                        {
                            <NavLinkCategory Identifier="guild.ID" Text="@guild.Name" ImageURL="@guild.GetIconURL(_avatarSize)" 
                                OnClick=@this.OnCategoryClick IsOpen=@(this._currentCategoryIdentifier == guild.ID)>
                                <div class="nav-item">
                                    <NavLink class="nav-link" href="@($"/guild/{guild.ID}/message-triggers")" Match="NavLinkMatch.Prefix">
                                        <span class="oi oi-bolt" aria-hidden="true"></span>
                                        <span class="text">Message Triggers</span>
                                    </NavLink>
                                </div>
                            </NavLinkCategory>
                        }
                        </Authorized>
                    </PolicyAuthorizeView>
                </Authorized>
                <Authorizing>
                    @this.RenderItemLoading()
                    @this.RenderGuildsLoading()
                </Authorizing>
                <NotAuthorized>
                    <ServerOnly>
                        @this.RenderItemLoading()
                        @this.RenderGuildsLoading()
                    </ServerOnly>
                </NotAuthorized>
            </AuthorizeView>
        </nav>
    </div>

    <CurrentUserPanel CssClass="@this.NavMenuCssClass" />
</div>

@code {
    private const int _avatarSize = 32;

    private ulong? _currentCategoryIdentifier;
    private bool _collapseNavMenu = true;
    private string _botAvatarUrl;
    private string _userAvatarUrl;
    private string NavMenuCssClass => this._collapseNavMenu ? "collapse" : null;


    protected override async Task OnParametersSetAsync()
    {
        if (this._currentCategoryIdentifier == null)
        {
            if (base.PrerenderingState.TryTakeFromJson(nameof(_currentCategoryIdentifier), out ulong? currentCategory))
                this._currentCategoryIdentifier = currentCategory;
            else
                this.UpdateLinkCategory();
        }
        if (this._botAvatarUrl == null)
        {
            if (base.PrerenderingState.TryTakeFromJson(nameof(_botAvatarUrl), out string botAvatarUrl))
                this._botAvatarUrl = botAvatarUrl;
            else
            {
                IDiscordUserInfo info = await this.UserInfoProvider.GetBotInfoAsync();
                this._botAvatarUrl = info?.GetAvatarURL(_avatarSize);
            }
        }

        this.Navigation.LocationChanged += this.OnLocationChanged;

        await base.OnParametersSetAsync();
    }

    private void ToggleNavMenu()
    {
        this._collapseNavMenu = !this._collapseNavMenu;
    }

    private void OnCategoryClick(NavLinkCategory category)
    {
        if (category.Identifier == this._currentCategoryIdentifier)
            this._currentCategoryIdentifier = null;
        else
            this._currentCategoryIdentifier = category.Identifier;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
        => this.UpdateLinkCategory();

    private void UpdateLinkCategory()
    {
        this._currentCategoryIdentifier = this.FindLinkCategory();
        this.Log.LogTrace("Menu category identifier updated to {ID}", this._currentCategoryIdentifier);
    }

    private ulong FindLinkCategory()
    {
        string path = this.Navigation.ToBaseRelativePath(this.Navigation.Uri);
        if (path.StartsWith("guild/", StringComparison.OrdinalIgnoreCase))
        {
            Match match = Regex.Match(path, @"^guild/(\d{17,20})", RegexOptions.CultureInvariant | RegexOptions.Compiled | RegexOptions.IgnoreCase);
            if (match.Success && match.Groups[1].Success)
                return ulong.Parse(match.Groups[1].Value);
        }
        return  0;
    }

    protected override Task PersistAsync()
    {
        base.PrerenderingState.PersistAsJson(nameof(_botAvatarUrl), this._botAvatarUrl);
        base.PrerenderingState.PersistAsJson(nameof(_currentCategoryIdentifier), this._currentCategoryIdentifier);
        return Task.CompletedTask;
    }

    private RenderFragment RenderItemLoading()
    {
        return __builder =>
        {
            <div class="loading-placeholder">
                <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Circle" Width="25px" Height="25px" />
                <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Text" Height="22px" Class="" />
            </div>
        };
    }

    private RenderFragment RenderGuildsLoading()
    {
        return __builder =>
        {
            <hr/>
            @for (int i = 0; i < 3; i++)
            {
                @this.RenderItemLoading()
            }
        };
    }

    private Task LogoutAsync()
        => (this.AuthProvider as IWebAuthProvider).LogoutAsync();

    public override void Dispose()
    {
        base.Dispose();
        try { this.Navigation.LocationChanged -= this.OnLocationChanged; } catch { }
    }
}
