@inherits DiscordEntityPickerBase<GuildUserInfoResponse>

<EntityPickerWrapper Open="base.IsOpen" CssClass="user-picker" OpenChanged="base.OnDrawerOpenChanged" EnablePrivacyAlert="true"
    DefaultFilterValue="@this._filter" DefaultFilterHelperText="Find User by Name" DefaultFilterValueChanged="this.OnFilterTextChanged">
    <HeaderContent>
        <MudText Color="Color.Primary" Typo="Typo.h6">User Picker</MudText>
    </HeaderContent>
    <ChildContent>

        <MudTextField Class="picker-filter-field mx-2" T="string" Value="this._roleFilter" Variant="Variant.Outlined" Margin="Margin.Dense" 
                AdornmentIcon="@this.RoleFilterFieldIcon" Adornment="Adornment.Start" Clearable="true"
                Label="Role Filter" HelperText="Find User by their Roles" HelperTextOnFocus="true"
                DebounceInterval="200" MaxLength="128" ValueChanged="this.OnRoleFilterTextChanged" />

        <MudItem xs="12" Class="d-flex flex-row mx-2 mt-1 mb-4 justify-space-around">
            <MudItem Class="flex-shrink-1 flex-grow-1">
                <MudSwitch T="bool" Color="Color.Tertiary" Checked="@this._showBots" Label="Show Bots" CheckedChanged="this.OnShowBotsChanged" />
            </MudItem>
            <MudItem Class="flex-shrink-1 flex-grow-1">
                <MudSwitch T="bool" Color="Color.Tertiary" Checked="@this._adminsOnly" Label="Admins Only" CheckedChanged="this.OnAdminsOnlyChanged" />
            </MudItem>
        </MudItem>

        @if (this._filteredGuilds != null)
        {
            @foreach (KeyValuePair<GuildInfoResponse, IEnumerable<GuildUserInfoResponse>> guild in this._filteredGuilds)
            {
                <EntityPickerGuildSection @key="@guild.Key.ID" Guild="guild.Key" InitiallyExpanded="this._allGuilds.Count == 1">
                    @foreach (GuildUserInfoResponse user in guild.Value)
                    {
                        <DiscordUserPreview @key="user" User="user" CssClass="picker-item gap-2" Clicked="_ => base.PickEntity(user)" 
                            UseGuildAvatar="true" UseGuildNickname="true" ShowAdminIcon="true" UseGuildRoleColor="true"
                            ShowAvatar="true" AvatarSize="32" ShowBotTag="true" />
                    }
                </EntityPickerGuildSection>
            }
        }
    </ChildContent>
</EntityPickerWrapper>

@code {
    private string _filter;
    private string _roleFilter;
    private bool _showBots = true;
    private bool _adminsOnly = false;
    private IDictionary<GuildInfoResponse, IEnumerable<GuildUserInfoResponse>> _allGuilds;
    private IDictionary<GuildInfoResponse, IEnumerable<GuildUserInfoResponse>> _filteredGuilds;

    private EntityPickerSettings _settings;

    private string RoleFilterFieldIcon => string.IsNullOrWhiteSpace(this._roleFilter) ? Icons.Filled.FilterAltOff : Icons.Filled.FilterAlt;

    public Task<GuildUserInfoResponse> OpenAsync(EntityPickerSettings settings, CancellationToken cancellationToken = default)
    {
        this._settings = settings;
        return base.OpenAsync(cancellationToken);
    }

    protected override async Task OnOpeningAsync(CancellationToken cancellationToken)
    {
        IEnumerable<GuildInfoResponse> data = await this.EntityInfoProvider.GetGuildInfosAsync(cancellationToken);
        this._allGuilds = data.ToDictionary(g => g, g => g.Users);
        this._settings ??= new EntityPickerSettings();
        this.ApplyFilter();
    }

    protected override Task OnClosingAsync(CancellationToken cancellationToken)
    {
        this._allGuilds = null;
        this._filteredGuilds = null;
        this._settings = null;
        return Task.CompletedTask;
    }

    private void ApplyFilter()
    {
        this._filteredGuilds = this._allGuilds;

        if (this._settings.ShownGuildIDs != null)
            this._filteredGuilds = this._filteredGuilds.IntersectBy(this._settings.ShownGuildIDs, g => g.Key.ID).ToDictionary(g => g.Key, g => g.Value);
        if (!string.IsNullOrWhiteSpace(this._filter))
        {
            this._filteredGuilds = this._filteredGuilds.ToDictionary(g => g.Key, g => g.Value.Where(u => 
                    u.GetUsernameWithDiscriminator().Contains(this._filter, StringComparison.OrdinalIgnoreCase) ||
                    u.Nickname?.Contains(this._filter, StringComparison.OrdinalIgnoreCase) == true));
        }
        if (!string.IsNullOrWhiteSpace(this._roleFilter))
        {
            string roleFilter = this._roleFilter.StartsWith('@') ? this._roleFilter[1..] : this._roleFilter;

            this._filteredGuilds = this._filteredGuilds.ToDictionary(g => g.Key, g => g.Value.Where(u =>
                    u.Roles.Any(r => r.Name.Contains(roleFilter, StringComparison.OrdinalIgnoreCase))));
        }

        if (!this._showBots)
            this._filteredGuilds = this._filteredGuilds.ToDictionary(g => g.Key, g => g.Value.Where(u => !u.IsBot));
        if (this._adminsOnly)
            this._filteredGuilds = this._filteredGuilds.ToDictionary(g => g.Key, g => g.Value.Where(u => u.IsOwner || u.IsAdmin));

        this._filteredGuilds = this._filteredGuilds
            .Where(g => g.Value.Any())
            .ToDictionary(g => g.Key, g => g.Value.OrderBy(r => r.Nickname ?? r.Username).AsEnumerable());
    }

    private string GetUserText(GuildUserInfoResponse user)
        => user.Nickname ?? user.Username;

    private string GetUserStyle(GuildUserInfoResponse user)
        => $"color: {user.GetTopRoleWithColor().GetHtmlColorOrDefault()}";
        
    private void OnFilterTextChanged(string value)
    {
        this._filter = value;
        this.ApplyFilter();
    }

    private void OnRoleFilterTextChanged(string value)
    {
        this._roleFilter = value;
        this.ApplyFilter();
    }

    private void OnShowBotsChanged(bool value)
    {
        this._showBots = value;
        this.ApplyFilter();
    }
    private void OnAdminsOnlyChanged(bool value)
    {
        this._adminsOnly = value;
        this.ApplyFilter();
    }

    private RenderFragment RenderAdminIcon(GuildUserInfoResponse user)
    {
        string tooltipText = null;
        string iconClass = null;
        if (user.IsOwner)
        {
            tooltipText = "Owner";
            iconClass = "discord-admin-icon owner";
        }
        else if (user.IsAdmin)
        {
            tooltipText = "Administrator";
            iconClass = "discord-admin-icon admin";
        }
        else
            return null;

        return __builder =>
        {
            <MudTooltip Delay="500" Placement="Placement.Top">
                <TooltipContent>
                    @tooltipText
                </TooltipContent>
                <ChildContent>
                    <MudIcon Size="Size.Small" Class="@iconClass" Icon="@Icons.Filled.Star" />
                </ChildContent>
            </MudTooltip>
        };
    }
}
