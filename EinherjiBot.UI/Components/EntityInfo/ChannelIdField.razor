@using TehGM.EinherjiBot.UI.Components.EntityInfo.Pickers

@inherits EntityIdFieldBase<ChannelInfoResponse>

<MudItem xs="12" Class="d-flex flex-row align-center id-list-item">
    <MudTextField T="ulong?" Value="@base.Value" ValueChanged="base.OnValueChangedAsync" Clearable="!base.ReadOnly" ReadOnly="base.ReadOnly"
        Label="@this.Label" Variant="Variant.Filled" Margin="Margin.Dense" Class="flex-grow-1" 
        Error="base.IsError" ErrorText="Not a valid Discord Channel ID." />
    @if (base.FoundEntity != null)
    {
        <MudItem xs="3" Class="d-flex flex-row flex-grow-1 ml-2 role-preview">
            <MudTooltip Delay="300" Placement="Placement.Top" Class="d-flex flex-grow-1">
                <TooltipContent>
                    <MudItem xs="12" Class="d-flex flex-column flex-shrink-1">
                        <span>@this.RenderIcon(base.FoundEntity, Size.Small) @base.FoundEntity.Name @this.RenderParents(Size.Small)</span>
                        <span>@base.FoundEntity.GuildName</span>
                    </MudItem>
                </TooltipContent>
                <ChildContent>
                    <MudText Class="text-cutoff">@this.RenderIcon(base.FoundEntity, Size.Medium) @base.FoundEntity.Name</MudText>
                </ChildContent>
            </MudTooltip>
        </MudItem>
    }
    @if (!base.ReadOnly)
    {
        <MudIconButton Class="align-self-first-baseline" Icon="@Icons.Outlined.PersonSearch" Color="Color.Secondary" 
            Disabled="this.Picker == null || base.ReadOnly" Size="Size.Medium" OnClick="this.OnPickerClicked" />
    }
</MudItem>

@code {
    [Parameter]
    public ChannelPickerSettings PickerSettings { get; set; }
    [CascadingParameter]
    private ChannelPicker Picker { get; set; }
    [Parameter]
    public string Label { get; set; } = "Channel ID";

    private ICollection<ChannelInfoResponse> _parents;

    protected override async Task<ChannelInfoResponse> FindEntityAsync(ulong id)
    {
        this._parents?.Clear();
        ChannelInfoResponse result = await this.EntityInfoProvider.GetChannelInfoAsync(id);
        ulong? parentID = result.ParentID;
        while (parentID != null)
        {
            ChannelInfoResponse parent = await this.EntityInfoProvider.GetChannelInfoAsync(parentID.Value);
            this._parents ??= new List<ChannelInfoResponse>();
            this._parents.Add(parent);
            parentID = parent.ParentID;
        }
        return result;
    }

    private RenderFragment RenderIcon(ChannelInfoResponse channel, Size size)
    {
        string icon = ChannelIcon.GetForChannel(channel);
        if (string.IsNullOrWhiteSpace(icon))
            return null;
        return @<MudIcon Icon="@icon" Size="size" />;
    }

    private RenderFragment RenderParents(Size iconSize)
    {
        if (this._parents?.Any() != true)
            return null;
        return __builder =>
        {
            <text>(</text>
            @foreach (ChannelInfoResponse parent in this._parents)
            {
                <MudIcon Icon="@Icons.Filled.ArrowRightAlt" Size="iconSize" /> @RenderIcon(parent, iconSize) @parent.Name
            }
            <text>)</text>
        };
    }

    private async Task OnPickerClicked(MouseEventArgs e)
    {
        ChannelInfoResponse entity = await this.Picker.OpenAsync(this.PickerSettings);
        if (entity != null)
            await base.SetValueAsync(entity.ID);
    }
}
