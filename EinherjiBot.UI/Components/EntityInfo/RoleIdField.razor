@using TehGM.EinherjiBot.UI.Components.EntityInfo.Pickers

@inherits EntityIdFieldBase<RoleInfoResponse>

<MudItem xs="12" Class="d-flex flex-row align-center id-list-item">
    <MudTextField T="ulong?" Value="@base.Value" ValueChanged="base.OnValueChangedAsync" Clearable="!base.ReadOnly" ReadOnly="base.ReadOnly"
        Label="@this.Label" Variant="Variant.Filled" Margin="Margin.Dense" Class="flex-grow-1" 
        Error="this.IsError" ErrorText="Not a valid Discord Role ID." />
    @if (base.FoundEntity.IsFound())
    {
        <MudItem xs="3" Class="d-flex flex-row flex-grow-1 ml-2 role-preview">
            <MudTooltip Delay="300" Placement="Placement.Top" Class="d-flex flex-grow-1">
                <TooltipContent>
                    @@@base.FoundEntity.Name<br/>
                    @base.FoundEntity.GuildName
                </TooltipContent>
                <ChildContent>
                    <MudText Style="@this.RoleStyle">@@@base.FoundEntity.Name</MudText>
                </ChildContent>
            </MudTooltip>
        </MudItem>
    }
    @if (!base.ReadOnly)
    {
        <MudIconButton Class="align-self-first-baseline" Icon="@Icons.Outlined.PersonSearch" Color="Color.Secondary" 
            Disabled="this.Picker == null || base.ReadOnly" Size="Size.Medium" OnClick="this.OnPickerClicked" />
    }
</MudItem>

@code {
    [CascadingParameter]
    private RolePicker Picker { get; set; }
    [Parameter]
    public bool AllowNone { get; set; }
    [Parameter]
    public string Label { get; set; } = "Role ID";

    private string RoleStyle => $"color: {base.FoundEntity.GetHtmlColorOrDefault()};";

    protected override async Task<RoleInfoResponse> FindEntityAsync(ulong id)
    {
        RoleInfoResponse result = await this.EntityInfoProvider.GetRoleInfoAsync(id);
        if (result == null && this.AllowNone)
            result = RoleInfoResponse.None;
        return result;
    }

    private async Task OnPickerClicked(MouseEventArgs e)
    {
        RoleInfoResponse entity = await this.Picker.OpenAsync();
        if (entity != null)
            await base.SetValueAsync(entity.ID);
    }
}
