@inherits EntityIdListItemBase<IDiscordGuildInfo>

<MudItem xs="12" Class="d-flex flex-row align-center id-list-item">
    <MudTextField @ref="this._inputField" T="ulong?" Value="@base.Value" ValueChanged="base.OnValueChangedAsync" Clearable="!base.ReadOnly" ReadOnly="base.ReadOnly"
        Label="Guild ID" Variant="Variant.Filled" Margin="Margin.Dense" Class="flex-grow-1" 
        Validation="this.ValidationDelegate" />
    @if (base.FoundEntity.IsFound())
    {
        <MudTooltip Delay="300" Placement="Placement.Top">
            <TooltipContent>
                @this.FoundEntity.Name
            </TooltipContent>
            <ChildContent>
                <MudItem xs="1" Class="d-flex flex-row flex-grow-1 ml-2 user-preview">
                    <MudAvatar Size="Size.Medium" Image="@base.FoundEntity.GetIconURL(64)" Class="mr-1" />
                </MudItem>
            </ChildContent>
        </MudTooltip>
    }
    @if (!base.ReadOnly)
    {
        <MudIconButton Icon="@Icons.Outlined.PersonSearch" Color="Color.Secondary" Disabled="this.Picker == null || base.ReadOnly" Size="Size.Medium" OnClick="this.OnPickerClicked" />
    }
</MudItem>

@code {
    [CascadingParameter]
    private RolePicker Picker { get; set; }

    private MudTextField<ulong?> _inputField;

    protected override async Task<IDiscordGuildInfo> FindEntityAsync(ulong id)
    {
        IDiscordGuildInfo result = await this.EntityInfoProvider.GetGuildInfoAsync(id);
        if (result == null)
            result = GuildInfoResponse.None;
        return result;
    }

    protected override async Task ValidateAndLookupAsync()
    {
        await base.ValidateAndLookupAsync();
        if (this.IsError)
            await this._inputField.Validate();
    }

    private Func<ulong?, IEnumerable<string>> ValidationDelegate => value =>
    {
        if (base.IsError)
            return new string[] { "Not a valid Discord Guild ID." };
        return Enumerable.Empty<string>();
    }; 

    private async Task OnPickerClicked(MouseEventArgs e)
    {
        RoleInfoResponse entity = await this.Picker.OpenAsync();
        if (entity != null)
            await base.SetValueAsync(entity.ID);
    }
}
