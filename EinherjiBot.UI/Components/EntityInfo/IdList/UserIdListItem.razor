@inherits EntityIdListItemBase<IDiscordUserInfo>

<MudItem xs="12" Class="d-flex flex-row align-center id-list-item">
    <MudTextField T="ulong?" Value="@base.Value" ValueChanged="base.OnValueChangedAsync" Clearable="!base.ReadOnly" ReadOnly="base.ReadOnly"
        Label="User ID" Variant="Variant.Filled" Margin="Margin.Dense" Class="flex-grow-1" 
        Error="base.IsError" ErrorText="Not a valid Discord User ID." />
    @if (base.FoundEntity != null)
    {
        <MudTooltip Delay="300" Placement="Placement.Top">
            <TooltipContent>
                @this.FoundEntity.GetUsernameWithDiscriminator()
            </TooltipContent>
            <ChildContent>
                <MudItem xs="1" Class="d-flex flex-row flex-grow-1 ml-2 user-preview">
                    <MudAvatar Size="Size.Medium" Image="@base.FoundEntity.GetAvatarURL(64)" Class="mr-1" />
                </MudItem>
            </ChildContent>
        </MudTooltip>
    }
    @if (!base.ReadOnly)
    {
        <MudIconButton Icon="@Icons.Outlined.PersonSearch" Color="Color.Secondary" Disabled="this.Picker == null || base.ReadOnly" Size="Size.Medium" OnClick="this.OnPickerClicked" />
    }
</MudItem>

@code {
    [CascadingParameter]
    private UserPicker Picker { get; set; }

    protected override async Task<IDiscordUserInfo> FindEntityAsync(ulong id)
        => await this.EntityInfoProvider.GetUserInfoAsync(id);

    private async Task OnPickerClicked(MouseEventArgs e)
    {
        GuildUserInfoResponse entity = await this.Picker.OpenAsync();
        if (entity != null)
            await base.SetValueAsync(entity.ID);
    }
}
