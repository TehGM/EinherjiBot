@using TehGM.EinherjiBot.UI.Security
@inherits PrerenderingComponent
@inject IDiscordLoginRedirect LoginRedirect

<div class="sidebar">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>
    
    <div class="nav-menu-items @NavMenuCssClass">
        <nav class="flex-column">
            
            <NavLinkCategory @ref=this._botCategory Text="Einherji" ImageURL="@this._botAvatarUrl" 
                OnClick=@this.OnCategoryClick IsOpen="@(this._botCategory == this._currentCategory)">
                <div class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span>
                        <span class="text">Home</span>
                    </NavLink>
                </div>
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/intel" Match="NavLinkMatch.Prefix">
                                <span class="oi oi-people" aria-hidden="true"></span>
                                <span class="text">Intel</span>
                            </NavLink>
                        </div>
                        @if (this.AuthProvider.User.IsAdmin())
                        {
                            <div class="nav-item">
                                <NavLink class="nav-link" href="/audit" Match="NavLinkMatch.All">
                                    <span class="oi oi-excerpt" aria-hidden="true"></span>
                                    <span class="text">Audits</span>
                                </NavLink>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            </NavLinkCategory>

            <AuthorizeView>
                <Authorized>
                    <NavLinkCategory @ref=this._userCategory Text="@this.AuthProvider.User.GetUsernameWithDiscriminator()" ImageURL="@this.AuthProvider.User?.GetAvatarURL(_avatarSize)" 
                        OnClick=@this.OnCategoryClick IsOpen="@(this._userCategory == this._currentCategory)">
                        <div class="nav-item">
                            <NavLink class="nav-link" @onclick=this.LogoutAsync>
                                <span class="oi oi-account-logout" aria-hidden="true"></span>
                                <span class="text">Logout</span>
                            </NavLink>
                        </div>
                    </NavLinkCategory>
                </Authorized>
            </AuthorizeView>
        </nav>
    </div>

    <CurrentUserPanel CssClass="@this.NavMenuCssClass" />
</div>

@code {
    private const int _avatarSize = 32;

    private NavLinkCategory _botCategory;
    private NavLinkCategory _userCategory;

    private NavLinkCategory _currentCategory;
    private bool _collapseNavMenu = true;
    private string _botAvatarUrl;
    private string _userAvatarUrl;
    private string NavMenuCssClass => this._collapseNavMenu ? "collapse" : null;

    protected override async Task OnParametersSetAsync()
    {
        if (this._botAvatarUrl == null)
        {
            if (base.PrerenderingState.TryTakeFromJson(nameof(_botAvatarUrl), out string botAvatarUrl))
                this._botAvatarUrl = botAvatarUrl;
            else
            {
                IDiscordUserInfo info = await this.UserInfoProvider.GetBotInfoAsync();
                this._botAvatarUrl = info?.GetAvatarURL(_avatarSize);
            }
        }
        await base.OnParametersSetAsync();
    }

    private void ToggleNavMenu()
    {
        this._collapseNavMenu = !this._collapseNavMenu;
    }

    private void OnCategoryClick(NavLinkCategory category)
    {
        if (category == this._currentCategory)
            this._currentCategory = null;
        else
            this._currentCategory = category;
    }

    protected override Task PersistAsync()
    {
        base.PrerenderingState.PersistAsJson(nameof(_botAvatarUrl), this._botAvatarUrl);
        return Task.CompletedTask;
    }

    private Task LogoutAsync()
    => (this.AuthProvider as IWebAuthProvider).LogoutAsync();
}
