@using Discord
@using TehGM.EinherjiBot.BotStatus
@using TehGM.EinherjiBot.PlaceholdersEngine
@using TehGM.EinherjiBot.PlaceholdersEngine.API
@using TehGM.EinherjiBot.UI.PlaceholdersEngine
@using TehGM.EinherjiBot.Utilities
@inject IBotStatusHandler Service
@inject IPlaceholdersService Placeholders
@inject IPlaceholdersBuilder PlaceholdersDialog

<div class="spaced-card">
    <MudCard Elevation="4">
        <MudCardHeader>
            <MudGrid Class="flex-wrap">
                <MudItem xs="7" sm="6" md="8">
                    <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Primary" Disabled="this._processing || !this.IsLinkValid" OnClick="this.OnSetClickedAsync">Use Now</MudButton>
                    <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Secondary" Disabled="this._processing || string.IsNullOrWhiteSpace(this._request.Text)" OnClick="this.OnPreviewClickedAsync">
                        Preview
                        <MudPopover Open="this._previewText != null" Elevation="7" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterLeft" Class="pa-4 d-flex flex-row gap-2">
                            <DiscordUserPreview User="this.BotInfo" CustomStatusText="@this._previewText" ShowAdminIcon="false" />
                            <MudIconButton Class="align-self-center" Color="MudBlazor.Color.Secondary" Icon="@Icons.Filled.Close" Size="Size.Small" OnClick="_ => this._previewText = null" />
                        </MudPopover>
                        <MudOverlay DarkBackground="true" Visible="this._previewText != null" OnClick="_ => this._previewText = null" />
                    </MudButton>
                </MudItem>
                <MudItem xs="5" sm="6" md="4" Class="d-flex justify-end">
                    @if (this._processing)
                    {
                        <MudProgressCircular Class="ms-n1" Color="MudBlazor.Color.Primary" Size="Size.Small" Indeterminate="true"/>
                    }
                    <MudSwitch @bind-Checked="this._request.IsEnabled" Color="MudBlazor.Color.Primary" Disabled="this._processing" Class="ml-0 mr-1"/>
                    <MudButton StartIcon="@this.SaveIcon" Variant="Variant.Filled" Color="MudBlazor.Color.Success" 
                        Disabled="this._processing || !this.HasPendingChanges() || !this.IsLinkValid" 
                        OnClick="this.OnSaveClickedAsync">@this.SaveText</MudButton>
                    <MudIconButton Icon="@this.DeleteIcon" Color="MudBlazor.Color.Error" Disabled="this._processing" OnClick="this.OnDeleteClickedAsync" />
                </MudItem>
            </MudGrid>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="3" lg="2">
                    <MudSelect T="ActivityType" @bind-Value="this._request.ActivityType" Label="Activity" Disabled="this._processing">
                        <MudSelectItem Value="ActivityType.Playing"><MudIcon Icon="@Icons.Filled.VideogameAsset"/> Playing</MudSelectItem>
                        <MudSelectItem Value="ActivityType.Watching"><MudIcon Icon="@Icons.Filled.OndemandVideo"/> Watching</MudSelectItem>
                        <MudSelectItem Value="ActivityType.Listening"><MudIcon Icon="@Icons.Filled.Headphones"/> Listening to</MudSelectItem>
                        <MudSelectItem Value="ActivityType.Streaming"><MudIcon Icon="@Icons.Filled.CellTower"/> Streaming</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="9" lg="10">
                    <MudTextField @bind-Value="this._request.Text" Label="Status (Empty to clear)" Disabled="this._processing" DebounceInterval="350" />
                </MudItem>
                @if (this.IsStreamingActivity)
                {
                    <MudItem xs="12">
                        <MudTextField @bind-Value="this._request.Link" Label="Twitch or YouTube URL (Optional)" Disabled="this._processing" 
                            Error="!this.IsLinkValid" Validation="@ActivityLinkValidator.ValidationDelegate" DebounceInterval="350" />
                    </MudItem>
                }
                @if (!string.IsNullOrWhiteSpace(this._error?.Message))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error">
                            <InlineTimestamp Timestamp="this._error.Timestamp.ToDateTime()" Style="font-weight: 600;" DisableHighlight="true" />:
                            @this._error.Message
                        </MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </MudCardContent>
    </MudCard>
</div>

@code {
    [CascadingParameter]
    public IDiscordUserInfo BotInfo { get; set; }

    [Parameter]
    public IBotStatus ExistingStatus { get; set; }

    [Parameter]
    public EventCallback<StatusEventArgs> Deleted { get; set; }
    [Parameter]
    public EventCallback<StatusEventArgs> Saved { get; set; }

    private Guid? _id;
    private BotStatusRequest _request;

    private string _previewText;

    private bool _processing;
    private IBotStatus _savedStatus;
    private ErrorInfoResponse _error;

    private bool IsNew => this._id == null;
    private bool IsStreamingActivity => this._request.ActivityType == ActivityType.Streaming;
    private bool IsLinkValid => !this.IsStreamingActivity || ActivityLinkValidator.IsLinkValid(this._request.Link);

    private string SaveIcon => this.IsNew ? Icons.Filled.AddCircle : Icons.Material.Filled.Save;
    private string SaveText => this.IsNew ? "Add" : "Save";
    private string DeleteIcon => this.IsNew ? Icons.Filled.Clear : Icons.Filled.DeleteForever;

    protected override void OnParametersSet()
    {
        if (this._savedStatus == null)
            this.LoadStatus(this.ExistingStatus);
        base.OnParametersSet();
    }

    private bool HasPendingChanges()
        => this._id == null
        || this.ExistingStatus.ActivityType != this._request.ActivityType
        || this.ExistingStatus.Text != this._request.Text
        || this.ExistingStatus.Link != this._request.Link
        || this.ExistingStatus.IsEnabled != this._request.IsEnabled;

    private void LoadStatus(IBotStatus status)
    {
        this._savedStatus = status;
        this.ExistingStatus = status;
        this._id = this.ExistingStatus?.ID;
        this._error = this.ExistingStatus?.LastError as ErrorInfoResponse;

        this._request = status != null ? BotStatusRequest.FromStatus(status) : new BotStatusRequest();
    }

    public void ClearInputs()
    {
        this.LoadStatus(null);
        base.StateHasChanged();
    }

    private async Task OnDeleteClickedAsync(MouseEventArgs e)
    {
        if (this._id != null)
        {
            string activity = this._request.ActivityType == ActivityType.Listening ? "Listening to" : this._request.ActivityType.ToString();
            string message = !string.IsNullOrWhiteSpace(this._request.Text)
                ? "Are you sure you want to permanently delete empty status?"
                : $"Are you sure you want to permanently delete status \"{activity} {this._request.Text}\"?";
            bool? result = await this.Dialogs.ShowMessageBox("Deleting Status", message,
                yesText: "Delete", cancelText: "Cancel");
            if (result != true)
                return;
        }

        this._processing = true;
        if (this._id != null)
        {
            await this.Service.DeleteAsync(this._id.Value);
            this.Notifications.Add("Status deleted.", Severity.Success);
        }
        await this.Deleted.InvokeAsync(new StatusEventArgs(this._id, this.ExistingStatus));
        this._processing = false;
    }

    private async Task OnSaveClickedAsync(MouseEventArgs e)
    {
        this._processing = true;
        BotStatusResponse response;
        if (this._id != null)
            response = await this.Service.UpdateAsync(this._id.Value, this._request);
        else
            response = await this.Service.CreateAsync(this._request);
        this.LoadStatus(response);
        this.Notifications.Add("Status saved.", Severity.Success);
        await this.Saved.InvokeAsync(new StatusEventArgs(this._id, this.ExistingStatus));
        this._processing = false;
    }

    private async Task OnSetClickedAsync(MouseEventArgs e)
    {
        this._processing = true;
        try
        {
            this._error = null;
            await this.Service.SetCurrentAsync(this._request);
            this.Notifications.Add("Bot's current status changed", Severity.Success);
        }
        catch (PlaceholderException ex)
        {
            this._error = new ErrorInfoResponse((UnixTimestamp)DateTime.UtcNow, ex.Message);
        }
        finally
        {
            this._processing = false;
        }
    }

    private async Task OnPreviewClickedAsync(MouseEventArgs e)
    {
        this._processing = true;
        try
        {
            PlaceholdersConvertResponse response = await this.Placeholders.ConvertAsync(new PlaceholdersConvertRequest(this._request.Text, PlaceholderUsage.Status));
            string activity = this._request.ActivityType == ActivityType.Listening ? "Listening to" : this._request.ActivityType.ToString();
            this._previewText = $"{activity} {response.Result}";
        }
        catch (PlaceholderException ex)
        {
            this._error = new ErrorInfoResponse((UnixTimestamp)DateTime.UtcNow, ex.Message);
        }
        finally
        {
            this._processing = false;
        }
    }

    public record StatusEventArgs(Guid? ID, IBotStatus Status);
}