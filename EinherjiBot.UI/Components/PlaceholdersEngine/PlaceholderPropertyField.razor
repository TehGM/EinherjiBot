@using TehGM.EinherjiBot.PlaceholdersEngine

<div class="d-flex flex-row flex-wrap align-center">
<MudItem xs="12" md="8">
    @if (this.Descriptor.PropertyType == typeof(string))
    {
        <MudTextField Label="@this.Descriptor.DisplayName" T="string" Value="this.Value.ToString()" ValueChanged="value => this.OnPropertyValueChangedAsync(value, true)"
            Required="@this.Descriptor.PropertyAttribute.IsRequired" Variant="Variant.Filled" />
    }
    else if (this.Descriptor.PropertyType.IsEnum)
    {
        <MudSelect T="string" Label="@this.Descriptor.DisplayName" Value="@this.Value.ToString()" ValueChanged="value => this.OnPropertyValueChangedAsync(value, true)" 
            Required="@this.Descriptor.PropertyAttribute.IsRequired" Variant="Variant.Filled">
            @foreach (KeyValuePair<string, string> value in EnumExtensions.GetDisplayNames(this.Descriptor.PropertyType))
            {
                <MudSelectItem Value="value.Key">@value.Value</MudSelectItem>
            }
        </MudSelect>
    }
    else if (this.Descriptor.PropertyType == typeof(ulong) || this.Descriptor.PropertyType == typeof(ulong?))
    {
        if (this.Descriptor.PropertyAttribute.IDType == IDType.User)
        {
            <UserIdField @ref="this._entityField" Label="@this.Descriptor.DisplayName" Value="@((ulong?)this.Value)" ValueChanged="e => this.OnPropertyValueChangedAsync(e.NewValue, e.IsValid)" />
        }
        else if (this.Descriptor.PropertyAttribute.IDType == IDType.Guild)
        {
            <GuildIdField @ref="this._entityField" Label="@this.Descriptor.DisplayName" Value="@((ulong?)this.Value)" ValueChanged="e => this.OnPropertyValueChangedAsync(e.NewValue, e.IsValid)" />
        }
        else if (this.Descriptor.PropertyAttribute.IDType == IDType.Channel)
        {
            <ChannelIdField @ref="this._entityField" Label="@this.Descriptor.DisplayName" Value="@((ulong?)this.Value)" ValueChanged="e => this.OnPropertyValueChangedAsync(e.NewValue, e.IsValid)" />
        }
        else if (this.Descriptor.PropertyAttribute.IDType == IDType.Role)
        {
            <RoleIdField @ref="this._entityField" Label="@this.Descriptor.DisplayName" Value="@((ulong?)this.Value)" ValueChanged="e => this.OnPropertyValueChangedAsync(e.NewValue, e.IsValid)" />
        }
        else
        {
            <MudTextField T="ulong?" Label="@this.Descriptor.DisplayName" Value="@((ulong?)this.Value)" ValueChanged="value => this.OnPropertyValueChangedAsync(value, true)"
                Required="@this.Descriptor.PropertyAttribute.IsRequired" Variant="Variant.Filled" />
        }
    }
</MudItem>

@if (this.HasDescription || this.HasValueDescription)
{
    <MudItem xs="12" md="4" Class="mt-0">
        <MudText Color="Color.Tertiary" Typo="Typo.body2" Class="mx-2">
            @(new MarkupString(this._valueDescription ?? this.Descriptor.Description))
        </MudText>
    </MudItem>
}
</div>

@code {
    [Parameter]
    public PlaceholderPropertyDescriptor Descriptor { get; set; }
    [Parameter]
    public object Value { get; set; }
    [Parameter]
    public EventCallback<PropertyChangedEventArgs> ValueChanged { get; set; }

    public bool IsValid { get; private set; }

    private bool HasDescription => !string.IsNullOrWhiteSpace(this.Descriptor.Description);
    private bool HasValueDescription => !string.IsNullOrWhiteSpace(this._valueDescription);

    private IEntityValidatingField _entityField;
    private string _valueDescription;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.OnPropertyValueChangedAsync(this.Value, this._entityField?.IsError != true);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private Task OnPropertyValueChangedAsync(object value, bool valid)
    {
        object actualValue = null;
        if (value is null)
        {
            if (this.Descriptor.PropertyType.IsValueType && Nullable.GetUnderlyingType(this.Descriptor.PropertyType) != null)
                actualValue = Activator.CreateInstance(this.Descriptor.PropertyType);
        }
        else
        {
            actualValue = this.Descriptor.PropertyType.IsEnum
                ? Enum.Parse(this.Descriptor.PropertyType, value.ToString(), ignoreCase: true)
                : Convert.ChangeType(value, this.Descriptor.PropertyType);
        }

        if (this.Descriptor.PropertyType.IsEnum)
        {
            this._valueDescription = actualValue is null ? null
                : EnumExtensions.GetDescription(this.Descriptor.PropertyType, actualValue.ToString());
        }

        this.Value = actualValue;
        this.IsValid = valid || (!this.Descriptor.PropertyAttribute.IsRequired && this.Descriptor.PropertyType.IsDefaultValue(actualValue));
        return this.ValueChanged.InvokeAsync(new PropertyChangedEventArgs(this.Descriptor, actualValue, this.IsValid));
    }
}
