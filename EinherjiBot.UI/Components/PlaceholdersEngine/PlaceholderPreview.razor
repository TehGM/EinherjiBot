@using System.Text.RegularExpressions
@using Discord
@using TehGM.EinherjiBot.PlaceholdersEngine
@using TehGM.EinherjiBot.PlaceholdersEngine.API

@inject IPlaceholdersService Placeholders

<div class="placeholder-preview">
    <MudField Class="mt-2 not-pickable" Label="Preview" Variant="Variant.Outlined" Disabled="this.IsError" >
        @(this._preview ?? this.NullPreview)
    </MudField>
</div>

@code {
    private static Regex _userMentionRegex = new Regex(@"^<@!?(\d{17,20})>$", RegexOptions.CultureInvariant | RegexOptions.Compiled);
    private static Regex _channelMentionRegex = new Regex(@"^<#(\d{17,20})>$", RegexOptions.CultureInvariant | RegexOptions.Compiled);
    private static Regex _roleMentionRegex = new Regex(@"^<@&(\d{17,20})>$", RegexOptions.CultureInvariant | RegexOptions.Compiled);

    [Parameter]
    public string SerializedPlaceholder { get; set; }
    [Parameter, EditorRequired]
    public PlaceholderConvertContext Context { get; set; }
    [Parameter]
    public bool Error { get; set; }
    [Parameter]
    public string ErrorText { get; set; } = "Preview disabled when properties have errors";

    private RenderFragment _preview;

    private string _serializedPlaceholder;
    private bool _error;

    private bool IsError => this.Error || string.IsNullOrEmpty(this.SerializedPlaceholder);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!this.CheckNeedsUpdate())
            return;

        if (!this.IsError)
        {
            PlaceholdersConvertRequest request = new PlaceholdersConvertRequest(this._serializedPlaceholder, this.Context);
            if (request.Context.MessageContent == null)
                request.Context.MessageContent = "A cat is fine too. Desu desu desu";
            PlaceholdersConvertResponse converted = await this.Placeholders.ConvertAsync(request);
            this._preview = await this.RenderPreviewAsync(converted?.Result);
        }
        else
            this._preview = null;
    }

    private bool CheckNeedsUpdate()
    {
        bool dirty = this.SerializedPlaceholder != this._serializedPlaceholder || this.Error != this._error;
        if (dirty)
        {
            this._serializedPlaceholder = this.SerializedPlaceholder;
            this._error = this.Error;
        }
        return dirty;
    }

    private async ValueTask<RenderFragment> RenderPreviewAsync(string preview)
    {
        if (string.IsNullOrWhiteSpace(preview))
            return null;

        Match userMatch = _userMentionRegex.Match(preview);
        if (userMatch.Success && ulong.TryParse(userMatch.Groups[1].Value, out ulong userID))
        {
            IDiscordUserInfo user = await this.EntityInfoProvider.GetUserInfoAsync(userID);
            return @<PreviewableUserSpan Entity="user" EnablePopover="false" EnableTooltip="false" ShowAsMention="true" />;
        }
        Match channelMatch = _channelMentionRegex.Match(preview);
        if (channelMatch.Success && ulong.TryParse(channelMatch.Groups[1].Value, out ulong channelID))
        {
            ChannelInfoResponse channel = await this.EntityInfoProvider.GetChannelInfoAsync(channelID);
            return @<PreviewableChannelSpan Entity="channel" EnablePopover="false" EnableTooltip="false" ShowTypeIcon="true" ShowAsMention="true" TypeIconMatchDiscord="true" />;
        }
        Match roleMatch = _roleMentionRegex.Match(preview);
        if (roleMatch.Success && ulong.TryParse(roleMatch.Groups[1].Value, out ulong roleID))
        {
            RoleInfoResponse role = await this.EntityInfoProvider.GetRoleInfoAsync(roleID);
            return @<PreviewableRoleSpan Entity="role" UseRoleColor="true" EnablePopover="false" EnableTooltip="false" ShowAsMention="true" />;
        }

        return @<text>@preview</text>;
    }

    private RenderFragment NullPreview => @<text>@this.ErrorText</text>;
}
