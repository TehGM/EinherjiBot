@using System.Text.RegularExpressions
@using TehGM.EinherjiBot.PlaceholdersEngine
@using TehGM.EinherjiBot.PlaceholdersEngine.API

@inject IPlaceholdersService Placeholders

<div class="placeholder-preview">
    <MudField Class="mt-2 not-pickable" Label="Preview" Variant="Variant.Outlined" ReadOnly="true" Disabled="this.IsError" >
        @(this._preview ?? this.NullPreview)
    </MudField>
</div>

@code {
    private static Regex _userMentionRegex = new Regex(@"^<@!?\d{17,20}>$", RegexOptions.CultureInvariant | RegexOptions.Compiled);
    private static Regex _channelMentionRegex = new Regex(@"^<#\d{17,20}>$", RegexOptions.CultureInvariant | RegexOptions.Compiled);
    private static Regex _roleMentionRegex = new Regex(@"^<@&\d{17,20}>$", RegexOptions.CultureInvariant | RegexOptions.Compiled);

    [Parameter]
    public string SerializedPlaceholder { get; set; }
    [Parameter, EditorRequired]
    public PlaceholderUsage Context { get; set; }
    [Parameter]
    public bool Error { get; set; }
    [Parameter]
    public string ErrorText { get; set; } = "Preview disabled when properties have errors";
    [Parameter]
    public ulong? EntityID { get; set; }

    private RenderFragment _preview;

    private string _serializedPlaceholder;
    private ulong? _entityID;

    private bool IsError => this.Error || string.IsNullOrEmpty(this.SerializedPlaceholder);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!this.CheckNeedsUpdate())
            return;

        if (!this.IsError)
        {
            PlaceholdersConvertResponse converted = await this.Placeholders.ConvertAsync(new PlaceholdersConvertRequest(this._serializedPlaceholder, this.Context));
            this._preview = await this.RenderPreviewAsync(converted?.Result);
        }
        else
            this._preview = null;
    }

    private bool CheckNeedsUpdate()
    {
        bool dirty = this.SerializedPlaceholder != this._serializedPlaceholder || this.EntityID != this._entityID;
        if (dirty)
        {
            this._entityID = this.EntityID;
            this._serializedPlaceholder = this.SerializedPlaceholder;
        }
        return dirty;
    }

    private async ValueTask<RenderFragment> RenderPreviewAsync(string preview)
    {
        if (string.IsNullOrWhiteSpace(preview))
            return null;

        if (this._entityID != null)
        {
            if (_userMentionRegex.IsMatch(preview))
            {
                IDiscordUserInfo user = await this.EntityInfoProvider.GetUserInfoAsync(this._entityID.Value);
                return @<PreviewableUserSpan Entity="user" EnablePopover="false" EnableTooltip="false" ShowAsMention="true" />;
            }
            if (_channelMentionRegex.IsMatch(preview))
            {
                ChannelInfoResponse channel = await this.EntityInfoProvider.GetChannelInfoAsync(this._entityID.Value);
                return @<PreviewableChannelSpan Entity="channel" EnablePopover="false" EnableTooltip="false" ShowTypeIcon="true" ShowAsMention="true" TypeIconMatchDiscord="true" />;
            }
            if (_roleMentionRegex.IsMatch(preview))
            {
                RoleInfoResponse role = await this.EntityInfoProvider.GetRoleInfoAsync(this._entityID.Value);
                return @<PreviewableRoleSpan Entity="role" UseRoleColor="true" EnablePopover="false" EnableTooltip="false" ShowAsMention="true" />;
            }
        }
        return @<text>@preview</text>;
    }

    private RenderFragment NullPreview => @<text>@this.ErrorText</text>;
}
